import groovy.transform.Field
import org.olf.kb.ErmResource

import com.k_int.web.toolkit.refdata.RefdataValue

import org.grails.orm.hibernate.cfg.GrailsHibernateUtil

@Field
ErmResource ermResource
ermResource = GrailsHibernateUtil.unwrapIfProxy(ermResource) as ErmResource

Map customCoverageMap = request?.getAttribute("${controllerName}.${actionName}.customCoverage") as Map

// Check for custom coverage on this resource.
List customCoverageList = customCoverageMap?.get("${ermResource.id}")

def minimalView = params.minimalView ?: false
if (minimalView && ermResource.class.name == 'org.olf.kb.PackageContentItem') {
  json g.render (template: '/packageContentItem/minimalPackageContentItem', model: (binding.variables + [customCoverageList: customCoverageList]))
} else {
  json {
    'id' ermResource.id
    'class' ermResource.class.name
    'name' ermResource.getName()

    'suppressFromDiscovery' ermResource.suppressFromDiscovery
    'tags' g.render(ermResource.tags)
    'alternateResourceNames' g.render(ermResource.alternateResourceNames)
    
    RefdataValue rdv = ermResource.getType() 
    
    if (rdv) {
      'type' g.render (rdv)
    }
    
    if (ermResource.publicationType) {
      'publicationType' g.render (ermResource.publicationType)
    }

    if (ermResource.subType) {
      'subType' g.render (ermResource.subType)
    }
    
    if (customCoverageList) {
      
      'coverage' g.render (customCoverageList)
      'customCoverage' true
      
    } else if (ermResource.coverage) {
      
      'coverage' g.render (ermResource.coverage)
      'customCoverage' false
      
    } else {
      'coverage' []
      'customCoverage' false
    }
    
    if (params.controller == 'export' ) {
      // add extra fields for export
      
    }
    
    //Render the full representation of whatever this object is.
    '_object' g.render(ermResource)
  }
}
