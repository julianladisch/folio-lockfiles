import java.util.concurrent.ExecutionException
import java.util.concurrent.Future

import org.olf.erm.Entitlement

import com.k_int.okapi.remote_resources.OkapiLookup

import groovy.transform.*
import groovyx.net.http.HttpException

/*
 * The original plan was when fetching multiple entitlements through "index" action,
 * to not make external fetches. We currently use the entitlements `index` action
 * however in multiple places, not just to render the main list, but also to render 
 * all the entitlements on an agreement, etc etc. In some of those places we currently
 * still wish to make the external fetch. This may change down the line, but for Nolana
 * the decision is to set up a special query param "fetchExternalResources". Default behaviour is
 * "true", so to quash the external fetch send "&fetchExternalResources=false".
 */

@Field Entitlement entitlement
final String objectProperty = 'reference_object'
def remoteObjValue

if(params.fetchExternalResources != 'false' && entitlement.respondsTo(objectProperty)){
  try {
    remoteObjValue = entitlement.invokeMethod(objectProperty, null)
    if (remoteObjValue instanceof Future) {
      remoteObjValue = (remoteObjValue as Future)?.get()
    }
  } catch (ExecutionException e) {
    
    if (e.cause instanceof HttpException) {
      HttpException httpEx = e.cause as HttpException
      remoteObjValue = [error: httpEx.statusCode, message: httpEx.message ]
    } else {
      remoteObjValue = [error: e.class.name, message: e.message]
    }
  }
}

boolean renderOwnerSnippet = true
if ( controllerName != 'subscriptionAgreement' ) {
  renderOwnerSnippet = false
}

// @TODO: Unify this with the parent template. 
json {
  'id' entitlement.id
  'type' 'external'
  'description' entitlement.description
  'authority' entitlement.getAuthority()
  'reference' entitlement.getReference()
  'explanation' entitlement.getExplanation()
  'startDate' entitlement.activeFrom
  'endDate' entitlement.activeTo
  'activeFrom' entitlement.activeFrom
  'activeTo' entitlement.activeTo
  'contentUpdated' entitlement.getContentUpdated()
  'haveAccess' entitlement.getHaveAccess()
  'suppressFromDiscovery' entitlement.suppressFromDiscovery
  'note' entitlement.note
  'docs'  g.render(entitlement.docs)
  
  if (renderOwnerSnippet) {
    'owner' g.render(entitlement.owner, [includes: ['id', 'name']])
  } else {
    'owner' g.render(entitlement.owner)
  }
  
  
  if (entitlement.poLines) {
    'poLines' g.render (entitlement.poLines)
  }

  if (entitlement.hasProperty('external_customCoverage')) {
    'customCoverage' entitlement.getAt('external_customCoverage')
  }
  
  if (entitlement.coverage) {
    'coverage' g.render (entitlement.coverage)
  }
  
  if (remoteObjValue) {
    call( objectProperty, remoteObjValue )
  }

  if (entitlement.tags) {
    'tags' g.render(entitlement.tags)
  }
}
