import groovy.transform.Field
import org.olf.erm.Entitlement
import org.olf.general.TemplatedUrl
import org.olf.kb.Embargo
import org.olf.kb.ErmResource
import org.olf.kb.PackageContentItem
import org.olf.kb.PlatformTitleInstance
import org.olf.kb.TitleInstance
import org.olf.kb.Platform
import org.grails.orm.hibernate.cfg.GrailsHibernateUtil

final Object[] tuple = binding.variables.values()[0]
boolean via_package = false
final ErmResource resource = GrailsHibernateUtil.unwrapIfProxy(tuple[0]) as ErmResource
Entitlement ent
TitleInstance ti
Embargo the_embargo
Platform the_platform
String the_depth
String the_note
String the_url
Set<TitleInstance> rti
Set<TemplatedUrl> the_templated_urls
boolean the_suppress_from_discovery

switch (resource) {
  case { it instanceof PackageContentItem }:
    PackageContentItem pci = resource as PackageContentItem
    via_package = tuple[1]
    ent = GrailsHibernateUtil.unwrapIfProxy(via_package ? tuple[1] : tuple[2]) as Entitlement
    ti = pci.pti.titleInstance
    the_platform = pci.pti.platform
    the_url = pci.pti.url
    the_templated_urls = pci.pti.templatedUrls
    the_embargo = pci.embargo
    the_depth = pci.depth
    the_note = pci.note
    the_suppress_from_discovery = pci.suppressFromDiscovery
    
    break
  case { it instanceof PlatformTitleInstance }:
    PlatformTitleInstance pti = resource as PlatformTitleInstance
    ent = GrailsHibernateUtil.unwrapIfProxy(tuple[2]) as Entitlement
    ti = pti.titleInstance
    the_platform = pti.platform
    the_url = pti.url
    the_templated_urls = pti.templatedUrls
    the_suppress_from_discovery = pti.suppressFromDiscovery
    break
    
  case { it instanceof TitleInstance}:
    ti = resource as TitleInstance
  
    // These resources can only be directly associated.
    via_package = false
    ent = GrailsHibernateUtil.unwrapIfProxy(tuple[2]) as Entitlement
    break
}

rti = ti.relatedTitles
 
Map customCoverageMap = request?.getAttribute("${controllerName}.${actionName}.customCoverage") as Map 

// Check for custom coverage on this resource.
List customCoverageList = customCoverageMap?.get("${resource.id}") 

json {

  tags g.render(resource.tags)

  if (via_package) {
    final def pkg = ent.resource
    
    "package" {
      id pkg.id
      name pkg.name
      identifiers g.render(pkg.identifiers)
    }
  }
  
  "agreementLine" g.render(ent, [includes:["id", "suppressFromDiscovery"]]) {
    tags g.render(ent.tags)
  }

  if (the_platform) {
     platform g.render(the_platform)
  }

  if (the_suppress_from_discovery != null) {
     suppressFromDiscovery the_suppress_from_discovery
  }
  
  if (the_embargo) {
    embargo g.render(the_embargo)
  }
  
  if (the_note) {
     note the_note
  }
  
  if (the_url) {
     url the_url
  }

  if (the_templated_urls) {
    templatedUrls ( the_templated_urls ) { TemplatedUrl tu ->
      id tu.id
      name tu.name
      url tu.url
    }
  }

  if (the_depth) {
    depth the_depth 
  }
  
  if (customCoverageList) {
    
    'coverage' g.render (customCoverageList)
    'customCoverage' true
    
  } else if (resource.coverage) {
    
    'coverage' g.render (resource.coverage)
    'customCoverage' false
     
  } else {
    'coverage' []
    'customCoverage' false
  }
  
  if (rti) {
    relatedTitles (rti) { TitleInstance relation ->

    // Also render a minimal title instance for the relation
    g.inline (relation, [includes: ['id', 'name', 'type', 'publicationType', 'subType', 'identifiers'], expand: ['type', 'publicationType', 'subType', 'identifiers']]) {
      longName ti.longName
      }
    }
  }

  title g.render(ti, [expand: ['identifiers', 'type', 'subType', 'tags'], excludes: ['entitlements', 'coverage', 'work', 'platformInstances']])

}

