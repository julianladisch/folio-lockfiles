import groovy.transform.Field
import org.olf.erm.EntitlementLogEntry
import org.olf.erm.RemoteLicenseLink
import org.olf.kb.PackageContentItem
import org.olf.kb.ErmResource
import com.k_int.okapi.remote_resources.RemoteOkapiLinkListener
import org.grails.orm.hibernate.cfg.GrailsHibernateUtil
import java.util.concurrent.Future

import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper()

final String licenseProperty = "remoteId${RemoteOkapiLinkListener.FETCHED_PROPERTY_SUFFIX}"

@Field
EntitlementLogEntry entitlementLogEntry
entitlementLogEntry = GrailsHibernateUtil.unwrapIfProxy(entitlementLogEntry) as EntitlementLogEntry
ErmResource res = GrailsHibernateUtil.unwrapIfProxy(entitlementLogEntry.res) as ErmResource
def resource_type = null

def default_coverage_summary = []
def coverage_summary = []
def custom_coverage = false

def resource_identifiers = []
def resource_title = null;
def license_details = null;
def pti_url = null;

def the_suppress_value = false;

// Get license details
RemoteLicenseLink controlling_license = null;

Entitlement entitlement = null;



// Any differing logic between direct/package entitlement
if ( entitlementLogEntry.packageEntitlement != null ) {
  entitlement = entitlementLogEntry.packageEntitlement
}
else if ( entitlementLogEntry.directEntitlement != null ) {
  entitlement = entitlementLogEntry.directEntitlement
}

controlling_license = entitlement?.owner?.getControllingLicense()
the_suppress_value = entitlement?.suppressFromDiscovery ?: false
// TODO this logic is repeated in the entitlement view. Perhaps should be refactored out
if (entitlement?.coverage) {
  coverage_summary =  g.render (entitlement.coverage)
  custom_coverage =  true
  
} else if (entitlement?.resource?.coverage) {
  coverage_summary =  g.render (entitlement.resource.coverage)
  custom_coverage = false
  
} else {
  coverage_summary = []
  custom_coverage = false
}

// Try to load the license details
try {
  // def license_details_future = (controlling_license?.getAt(licenseProperty) as Future)
  // license_details = license_details_future.get()
}
catch(Exception e) {
}

if ( res instanceof PackageContentItem ) {

  PackageContentItem pci = res as PackageContentItem
  resource_title = pci.pti.titleInstance.name
  resource_type = pci.pti.titleInstance.type?.value

  pci.pti.titleInstance.identifiers.each { id ->
    resource_identifiers.add([
      type: id.identifier.ns.value,
      value: id.identifier.value
    ])
  }

  pti_url = pci.pti.url;

  pci.coverage.each { it ->
    default_coverage_summary.add( 
    [ 
      'startDate': it.startDate,
      'endDate': it.endDate,
      'startVolume': it.startVolume,
      'startIssue': it.startIssue,
      'endVolume': it.endVolume,
      'endIssue': it.endIssue,
      'summary': it.toString()
    ] )
  }

  // If we have a direct resource check whether suppressFromDiscovery needs changing from any of the levels
  if (
    pci.suppressFromDiscovery ||
    pci.pti.suppressFromDiscovery ||
    pci.pti.titleInstance.suppressFromDiscovery
  ) {
    the_suppress_value = true
  }
}

/**
 *
 * linkedLicenses.remoteObject.customProperties
 * linkedLicenses.remoteObject.type.value
 */
json {
                              'seqid' entitlementLogEntry.seqid
                     'entitlement_id' entitlement?.id
                      'resource_name' res.name
                        'resource_id' res.id
  'activeEntitlementCountForResource' entitlementLogEntry.activeEntitlementCountForResource
                              'title' resource_title
                    'defaultCoverage' default_coverage_summary
                           'coverage' coverage_summary
                     'customCoverage' custom_coverage
                        'identifiers' resource_identifiers
                           'suppress' the_suppress_value
                               'type' resource_type
                            'license' license_details
                          'licenseId' controlling_license?.remoteId
                          'eventType' entitlementLogEntry.eventType
                                'url' pti_url
}
