import java.util.concurrent.ExecutionException
import java.util.concurrent.Future

import org.olf.general.Org
import org.olf.licenses.LicenseOrg

import groovy.transform.*
import groovyx.net.http.HttpException

@Field Org org
final String objectProperty = 'orgsUuid_object'
def remoteObjValue
if(actionName.toLowerCase() != 'index' && org.respondsTo(objectProperty)){
  try {
    remoteObjValue = org.invokeMethod(objectProperty, null)
    if (remoteObjValue instanceof Future) {
      remoteObjValue = (remoteObjValue as Future)?.get()
    }
  } catch (ExecutionException e) {
    
    if (e.cause instanceof HttpException) {
      HttpException httpEx = e.cause as HttpException
      remoteObjValue = [error: httpEx.statusCode, message: httpEx.message ]
    } else {
      remoteObjValue = [error: e.class.name, message: e.message]
    }
  }
}

json g.render(org) {
  if (remoteObjValue) {
    call( objectProperty, remoteObjValue )
  }
}
